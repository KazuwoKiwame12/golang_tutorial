package {{toLowerCase (Name .) }}modelrepository

//go:generate mockgen -destinition=mock_$GOFILE -package=$GOPACKAGE

import (
    "github.com/jmoiron/sqlx"
)


// 3. associated templatesの説明(少し応用)
{{template "slice" .}}

// 1はMust
// 1. text ・range
// 1.1. space
// 1.2. functions?
// 1.3. if
type {{.Name}}PK struct {
    {{range $index, $element := (Fields .)}}
    {{if isPK $element}}
    {{$element.Name}} {{$element.Type}}
    {{end}}
    {{end}}
}

// 2はあれば嬉しい
// 2. variables・functions(既存)・pipelinesの説明
func ({{ShortName .}} *{{.Name}}) to{{.Name}}PK() {{.Name}}PK {
	return {{.Name}}PK{
        {{range $index, $element := Fields .}}
        {{$element.Name}}: {{ShortName .}}.{{$element.Name}}
        {{end}}
    }
}

type {{ .Name -}}ModelRepository struct {
    client *sqlx.DB
}

func (r *{{.Name}}ModelRepository) Get({{ShortName .}}k {{.Name}}PK) (*{{.Name}}, error) {
	model := new({{.Name}})
	if err := r.client.Select(&model, `SELECT * FROM {{toLowerCase .Name}}
        WHERE
    {{range $index, $element := Fields .}}
    {{if isPK $element}}
    {{toLowerCase $element.Name}}=?
    {{if $index ne (len $element | subOne)}}
    AND
    {{end}}
    {{end}}
    `,
    {{range $index, $element := (Fields .)}}
    {{if isPK $element}}
    {{ShortName .}}k.{{$element.Name}},
    {{end}}
    {{end}}
    ); err != nil {
		return nil, err
	}
	return model, nil
}

{{range $index, $element := Fields .}}
{{if isSK $element}}
{{toLowerCase $element.Name}}=?
func (r *{{.Name}}ModelRepository) FindBy{{$element.Name}}({{toLowerCase $element.Name}} string) ({{.Name}}s, error) {
	var models {{.Name}}s
	if err := r.client.Select(&models, "SELECT * FROM {{toLowerCase .Name}} WHERE {{$element.Name}}=?", {{toLowerCase $element.Name}}); err != nil {
		return nil, err
	}
	return models, nil
}
{{end}}
{{end}}
{{end}}
